# Generated by Django 4.1.7 on 2023-03-31 02:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    atomic = True

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]



    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='', max_length=100)),
                ('content', models.CharField(default='', max_length=500)),
                ('createdAt', models.DateTimeField(auto_now=True)),
                ('updatedAt', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='writer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(default='', max_length=100)),
                ('createdAt', models.DateTimeField(auto_now=True)),
                ('updatedAt', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article', to='blog.article')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Article_Like',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('createdAt', models.DateTimeField(auto_now=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_id', to='blog.article')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_id', to=settings.AUTH_USER_MODEL)),
            ],
            
        ),
        migrations.RunSQL(
            (
            """
                create or replace function article_like( article_id numeric, user_id numeric )
                    return table (is_liked boolean, like_article_id int) as $$
                    declare
                        row_exists numeric;
                    begin
                        select
                            1
                        into
                            row_exists
                        from
                            blog_article_like
                        where
                            "article_id" = article_id and "user_id" = user_id
                    
                        if ( row_exists > 0 ) then 
                            delete from ffeed_like fl where fl."ffeedId" = ffeedId and fl."userId" = userId;
                            return query select false as "isLiked", 0::numeric as "likeFFeedId";
                        else 
                            insert into ffeed_like ("ffeedId", "userId") values (ffeedId, userId);
                            return query select true as "isLiked", (select id from ffeed_like where "ffeedId" = ffeedId and "userId" = userId)::numeric;
                            
                        end if;
                        
                end;
                $$
                language plpgsql;
            
            
            """

            )
        )
    ]
